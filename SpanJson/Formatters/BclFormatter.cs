using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Formatters;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters
{
    public sealed class SByteFormatter<TResolver> : IJsonFormatter<SByte, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SByteFormatter<TResolver> Default = new SByteFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, SByte value)
        {
            writer.WriteSByte(value);
        }

        public SByte Deserialize(ref JsonReader reader)
        {
            return reader.ReadSByte();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableSByteFormatter<TResolver> : NullableFormatter, IJsonFormatter<SByte?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSByteFormatter<TResolver> Default = new NullableSByteFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, SByte? value)
        {
            Serialize(ref writer, value, SByteFormatter<TResolver>.Default);
        }

        public SByte? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, SByteFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableSByteArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<SByte?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSByteArrayFormatter<TResolver> Default = new NullableSByteArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, SByte?[] value)
        {
			Serialize(ref writer, value, NullableSByteFormatter<TResolver>.Default);
        }

        public SByte?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableSByteFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableSByteListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<SByte?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSByteListFormatter<TResolver> Default = new NullableSByteListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<SByte?> value)
        {
			Serialize(ref writer, value, NullableSByteFormatter<TResolver>.Default);
        }

        public List<SByte?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableSByteFormatter<TResolver>.Default);
        }	
	}

    public sealed class SByteArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<SByte[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SByteArrayFormatter<TResolver> Default = new SByteArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, SByte[] value)
        {
			Serialize(ref writer, value, SByteFormatter<TResolver>.Default);
        }

        public SByte[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, SByteFormatter<TResolver>.Default);
        }
	}

	public sealed class SByteListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<SByte>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SByteListFormatter<TResolver> Default = new SByteListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<SByte> value)
        {
			Serialize(ref writer, value, SByteFormatter<TResolver>.Default);
        }

        public List<SByte> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, SByteFormatter<TResolver>.Default);
        }	
	}
    public sealed class Int16Formatter<TResolver> : IJsonFormatter<Int16, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int16Formatter<TResolver> Default = new Int16Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int16 value)
        {
            writer.WriteInt16(value);
        }

        public Int16 Deserialize(ref JsonReader reader)
        {
            return reader.ReadInt16();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableInt16Formatter<TResolver> : NullableFormatter, IJsonFormatter<Int16?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt16Formatter<TResolver> Default = new NullableInt16Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int16? value)
        {
            Serialize(ref writer, value, Int16Formatter<TResolver>.Default);
        }

        public Int16? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, Int16Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableInt16ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int16?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt16ArrayFormatter<TResolver> Default = new NullableInt16ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int16?[] value)
        {
			Serialize(ref writer, value, NullableInt16Formatter<TResolver>.Default);
        }

        public Int16?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt16Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableInt16ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int16?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt16ListFormatter<TResolver> Default = new NullableInt16ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int16?> value)
        {
			Serialize(ref writer, value, NullableInt16Formatter<TResolver>.Default);
        }

        public List<Int16?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt16Formatter<TResolver>.Default);
        }	
	}

    public sealed class Int16ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int16[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int16ArrayFormatter<TResolver> Default = new Int16ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int16[] value)
        {
			Serialize(ref writer, value, Int16Formatter<TResolver>.Default);
        }

        public Int16[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int16Formatter<TResolver>.Default);
        }
	}

	public sealed class Int16ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int16>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int16ListFormatter<TResolver> Default = new Int16ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int16> value)
        {
			Serialize(ref writer, value, Int16Formatter<TResolver>.Default);
        }

        public List<Int16> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int16Formatter<TResolver>.Default);
        }	
	}
    public sealed class Int32Formatter<TResolver> : IJsonFormatter<Int32, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int32Formatter<TResolver> Default = new Int32Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int32 value)
        {
            writer.WriteInt32(value);
        }

        public Int32 Deserialize(ref JsonReader reader)
        {
            return reader.ReadInt32();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableInt32Formatter<TResolver> : NullableFormatter, IJsonFormatter<Int32?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt32Formatter<TResolver> Default = new NullableInt32Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int32? value)
        {
            Serialize(ref writer, value, Int32Formatter<TResolver>.Default);
        }

        public Int32? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, Int32Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableInt32ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int32?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt32ArrayFormatter<TResolver> Default = new NullableInt32ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int32?[] value)
        {
			Serialize(ref writer, value, NullableInt32Formatter<TResolver>.Default);
        }

        public Int32?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt32Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableInt32ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int32?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt32ListFormatter<TResolver> Default = new NullableInt32ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int32?> value)
        {
			Serialize(ref writer, value, NullableInt32Formatter<TResolver>.Default);
        }

        public List<Int32?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt32Formatter<TResolver>.Default);
        }	
	}

    public sealed class Int32ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int32[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int32ArrayFormatter<TResolver> Default = new Int32ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int32[] value)
        {
			Serialize(ref writer, value, Int32Formatter<TResolver>.Default);
        }

        public Int32[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int32Formatter<TResolver>.Default);
        }
	}

	public sealed class Int32ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int32>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int32ListFormatter<TResolver> Default = new Int32ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int32> value)
        {
			Serialize(ref writer, value, Int32Formatter<TResolver>.Default);
        }

        public List<Int32> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int32Formatter<TResolver>.Default);
        }	
	}
    public sealed class Int64Formatter<TResolver> : IJsonFormatter<Int64, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int64Formatter<TResolver> Default = new Int64Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int64 value)
        {
            writer.WriteInt64(value);
        }

        public Int64 Deserialize(ref JsonReader reader)
        {
            return reader.ReadInt64();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableInt64Formatter<TResolver> : NullableFormatter, IJsonFormatter<Int64?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt64Formatter<TResolver> Default = new NullableInt64Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int64? value)
        {
            Serialize(ref writer, value, Int64Formatter<TResolver>.Default);
        }

        public Int64? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, Int64Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableInt64ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int64?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt64ArrayFormatter<TResolver> Default = new NullableInt64ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int64?[] value)
        {
			Serialize(ref writer, value, NullableInt64Formatter<TResolver>.Default);
        }

        public Int64?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt64Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableInt64ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int64?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableInt64ListFormatter<TResolver> Default = new NullableInt64ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int64?> value)
        {
			Serialize(ref writer, value, NullableInt64Formatter<TResolver>.Default);
        }

        public List<Int64?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableInt64Formatter<TResolver>.Default);
        }	
	}

    public sealed class Int64ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Int64[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int64ArrayFormatter<TResolver> Default = new Int64ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Int64[] value)
        {
			Serialize(ref writer, value, Int64Formatter<TResolver>.Default);
        }

        public Int64[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int64Formatter<TResolver>.Default);
        }
	}

	public sealed class Int64ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Int64>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly Int64ListFormatter<TResolver> Default = new Int64ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Int64> value)
        {
			Serialize(ref writer, value, Int64Formatter<TResolver>.Default);
        }

        public List<Int64> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, Int64Formatter<TResolver>.Default);
        }	
	}
    public sealed class ByteFormatter<TResolver> : IJsonFormatter<Byte, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly ByteFormatter<TResolver> Default = new ByteFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Byte value)
        {
            writer.WriteByte(value);
        }

        public Byte Deserialize(ref JsonReader reader)
        {
            return reader.ReadByte();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableByteFormatter<TResolver> : NullableFormatter, IJsonFormatter<Byte?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableByteFormatter<TResolver> Default = new NullableByteFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Byte? value)
        {
            Serialize(ref writer, value, ByteFormatter<TResolver>.Default);
        }

        public Byte? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, ByteFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableByteArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Byte?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableByteArrayFormatter<TResolver> Default = new NullableByteArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Byte?[] value)
        {
			Serialize(ref writer, value, NullableByteFormatter<TResolver>.Default);
        }

        public Byte?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableByteFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableByteListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Byte?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableByteListFormatter<TResolver> Default = new NullableByteListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Byte?> value)
        {
			Serialize(ref writer, value, NullableByteFormatter<TResolver>.Default);
        }

        public List<Byte?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableByteFormatter<TResolver>.Default);
        }	
	}

    public sealed class ByteArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Byte[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly ByteArrayFormatter<TResolver> Default = new ByteArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Byte[] value)
        {
			Serialize(ref writer, value, ByteFormatter<TResolver>.Default);
        }

        public Byte[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, ByteFormatter<TResolver>.Default);
        }
	}

	public sealed class ByteListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Byte>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly ByteListFormatter<TResolver> Default = new ByteListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Byte> value)
        {
			Serialize(ref writer, value, ByteFormatter<TResolver>.Default);
        }

        public List<Byte> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, ByteFormatter<TResolver>.Default);
        }	
	}
    public sealed class UInt16Formatter<TResolver> : IJsonFormatter<UInt16, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt16Formatter<TResolver> Default = new UInt16Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt16 value)
        {
            writer.WriteUInt16(value);
        }

        public UInt16 Deserialize(ref JsonReader reader)
        {
            return reader.ReadUInt16();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableUInt16Formatter<TResolver> : NullableFormatter, IJsonFormatter<UInt16?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt16Formatter<TResolver> Default = new NullableUInt16Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt16? value)
        {
            Serialize(ref writer, value, UInt16Formatter<TResolver>.Default);
        }

        public UInt16? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, UInt16Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableUInt16ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt16?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt16ArrayFormatter<TResolver> Default = new NullableUInt16ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt16?[] value)
        {
			Serialize(ref writer, value, NullableUInt16Formatter<TResolver>.Default);
        }

        public UInt16?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt16Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableUInt16ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt16?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt16ListFormatter<TResolver> Default = new NullableUInt16ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt16?> value)
        {
			Serialize(ref writer, value, NullableUInt16Formatter<TResolver>.Default);
        }

        public List<UInt16?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt16Formatter<TResolver>.Default);
        }	
	}

    public sealed class UInt16ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt16[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt16ArrayFormatter<TResolver> Default = new UInt16ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt16[] value)
        {
			Serialize(ref writer, value, UInt16Formatter<TResolver>.Default);
        }

        public UInt16[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt16Formatter<TResolver>.Default);
        }
	}

	public sealed class UInt16ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt16>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt16ListFormatter<TResolver> Default = new UInt16ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt16> value)
        {
			Serialize(ref writer, value, UInt16Formatter<TResolver>.Default);
        }

        public List<UInt16> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt16Formatter<TResolver>.Default);
        }	
	}
    public sealed class UInt32Formatter<TResolver> : IJsonFormatter<UInt32, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt32Formatter<TResolver> Default = new UInt32Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt32 value)
        {
            writer.WriteUInt32(value);
        }

        public UInt32 Deserialize(ref JsonReader reader)
        {
            return reader.ReadUInt32();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableUInt32Formatter<TResolver> : NullableFormatter, IJsonFormatter<UInt32?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt32Formatter<TResolver> Default = new NullableUInt32Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt32? value)
        {
            Serialize(ref writer, value, UInt32Formatter<TResolver>.Default);
        }

        public UInt32? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, UInt32Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableUInt32ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt32?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt32ArrayFormatter<TResolver> Default = new NullableUInt32ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt32?[] value)
        {
			Serialize(ref writer, value, NullableUInt32Formatter<TResolver>.Default);
        }

        public UInt32?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt32Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableUInt32ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt32?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt32ListFormatter<TResolver> Default = new NullableUInt32ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt32?> value)
        {
			Serialize(ref writer, value, NullableUInt32Formatter<TResolver>.Default);
        }

        public List<UInt32?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt32Formatter<TResolver>.Default);
        }	
	}

    public sealed class UInt32ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt32[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt32ArrayFormatter<TResolver> Default = new UInt32ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt32[] value)
        {
			Serialize(ref writer, value, UInt32Formatter<TResolver>.Default);
        }

        public UInt32[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt32Formatter<TResolver>.Default);
        }
	}

	public sealed class UInt32ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt32>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt32ListFormatter<TResolver> Default = new UInt32ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt32> value)
        {
			Serialize(ref writer, value, UInt32Formatter<TResolver>.Default);
        }

        public List<UInt32> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt32Formatter<TResolver>.Default);
        }	
	}
    public sealed class UInt64Formatter<TResolver> : IJsonFormatter<UInt64, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt64Formatter<TResolver> Default = new UInt64Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt64 value)
        {
            writer.WriteUInt64(value);
        }

        public UInt64 Deserialize(ref JsonReader reader)
        {
            return reader.ReadUInt64();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableUInt64Formatter<TResolver> : NullableFormatter, IJsonFormatter<UInt64?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt64Formatter<TResolver> Default = new NullableUInt64Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt64? value)
        {
            Serialize(ref writer, value, UInt64Formatter<TResolver>.Default);
        }

        public UInt64? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, UInt64Formatter<TResolver>.Default);
        }
	}
    public sealed class NullableUInt64ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt64?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt64ArrayFormatter<TResolver> Default = new NullableUInt64ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt64?[] value)
        {
			Serialize(ref writer, value, NullableUInt64Formatter<TResolver>.Default);
        }

        public UInt64?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt64Formatter<TResolver>.Default);
        }
	}

	public sealed class NullableUInt64ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt64?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableUInt64ListFormatter<TResolver> Default = new NullableUInt64ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt64?> value)
        {
			Serialize(ref writer, value, NullableUInt64Formatter<TResolver>.Default);
        }

        public List<UInt64?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableUInt64Formatter<TResolver>.Default);
        }	
	}

    public sealed class UInt64ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<UInt64[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt64ArrayFormatter<TResolver> Default = new UInt64ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, UInt64[] value)
        {
			Serialize(ref writer, value, UInt64Formatter<TResolver>.Default);
        }

        public UInt64[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt64Formatter<TResolver>.Default);
        }
	}

	public sealed class UInt64ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<UInt64>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UInt64ListFormatter<TResolver> Default = new UInt64ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<UInt64> value)
        {
			Serialize(ref writer, value, UInt64Formatter<TResolver>.Default);
        }

        public List<UInt64> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UInt64Formatter<TResolver>.Default);
        }	
	}
    public sealed class SingleFormatter<TResolver> : IJsonFormatter<Single, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SingleFormatter<TResolver> Default = new SingleFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Single value)
        {
            writer.WriteSingle(value);
        }

        public Single Deserialize(ref JsonReader reader)
        {
            return reader.ReadSingle();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableSingleFormatter<TResolver> : NullableFormatter, IJsonFormatter<Single?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSingleFormatter<TResolver> Default = new NullableSingleFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Single? value)
        {
            Serialize(ref writer, value, SingleFormatter<TResolver>.Default);
        }

        public Single? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, SingleFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableSingleArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Single?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSingleArrayFormatter<TResolver> Default = new NullableSingleArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Single?[] value)
        {
			Serialize(ref writer, value, NullableSingleFormatter<TResolver>.Default);
        }

        public Single?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableSingleFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableSingleListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Single?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableSingleListFormatter<TResolver> Default = new NullableSingleListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Single?> value)
        {
			Serialize(ref writer, value, NullableSingleFormatter<TResolver>.Default);
        }

        public List<Single?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableSingleFormatter<TResolver>.Default);
        }	
	}

    public sealed class SingleArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Single[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SingleArrayFormatter<TResolver> Default = new SingleArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Single[] value)
        {
			Serialize(ref writer, value, SingleFormatter<TResolver>.Default);
        }

        public Single[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, SingleFormatter<TResolver>.Default);
        }
	}

	public sealed class SingleListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Single>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly SingleListFormatter<TResolver> Default = new SingleListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Single> value)
        {
			Serialize(ref writer, value, SingleFormatter<TResolver>.Default);
        }

        public List<Single> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, SingleFormatter<TResolver>.Default);
        }	
	}
    public sealed class DoubleFormatter<TResolver> : IJsonFormatter<Double, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DoubleFormatter<TResolver> Default = new DoubleFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Double value)
        {
            writer.WriteDouble(value);
        }

        public Double Deserialize(ref JsonReader reader)
        {
            return reader.ReadDouble();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableDoubleFormatter<TResolver> : NullableFormatter, IJsonFormatter<Double?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDoubleFormatter<TResolver> Default = new NullableDoubleFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Double? value)
        {
            Serialize(ref writer, value, DoubleFormatter<TResolver>.Default);
        }

        public Double? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, DoubleFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableDoubleArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Double?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDoubleArrayFormatter<TResolver> Default = new NullableDoubleArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Double?[] value)
        {
			Serialize(ref writer, value, NullableDoubleFormatter<TResolver>.Default);
        }

        public Double?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDoubleFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableDoubleListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Double?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDoubleListFormatter<TResolver> Default = new NullableDoubleListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Double?> value)
        {
			Serialize(ref writer, value, NullableDoubleFormatter<TResolver>.Default);
        }

        public List<Double?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDoubleFormatter<TResolver>.Default);
        }	
	}

    public sealed class DoubleArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Double[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DoubleArrayFormatter<TResolver> Default = new DoubleArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Double[] value)
        {
			Serialize(ref writer, value, DoubleFormatter<TResolver>.Default);
        }

        public Double[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DoubleFormatter<TResolver>.Default);
        }
	}

	public sealed class DoubleListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Double>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DoubleListFormatter<TResolver> Default = new DoubleListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Double> value)
        {
			Serialize(ref writer, value, DoubleFormatter<TResolver>.Default);
        }

        public List<Double> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DoubleFormatter<TResolver>.Default);
        }	
	}
    public sealed class DecimalFormatter<TResolver> : IJsonFormatter<Decimal, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DecimalFormatter<TResolver> Default = new DecimalFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Decimal value)
        {
            writer.WriteDecimal(value);
        }

        public Decimal Deserialize(ref JsonReader reader)
        {
            return reader.ReadDecimal();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableDecimalFormatter<TResolver> : NullableFormatter, IJsonFormatter<Decimal?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDecimalFormatter<TResolver> Default = new NullableDecimalFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Decimal? value)
        {
            Serialize(ref writer, value, DecimalFormatter<TResolver>.Default);
        }

        public Decimal? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, DecimalFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableDecimalArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Decimal?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDecimalArrayFormatter<TResolver> Default = new NullableDecimalArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Decimal?[] value)
        {
			Serialize(ref writer, value, NullableDecimalFormatter<TResolver>.Default);
        }

        public Decimal?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDecimalFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableDecimalListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Decimal?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDecimalListFormatter<TResolver> Default = new NullableDecimalListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Decimal?> value)
        {
			Serialize(ref writer, value, NullableDecimalFormatter<TResolver>.Default);
        }

        public List<Decimal?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDecimalFormatter<TResolver>.Default);
        }	
	}

    public sealed class DecimalArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Decimal[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DecimalArrayFormatter<TResolver> Default = new DecimalArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Decimal[] value)
        {
			Serialize(ref writer, value, DecimalFormatter<TResolver>.Default);
        }

        public Decimal[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DecimalFormatter<TResolver>.Default);
        }
	}

	public sealed class DecimalListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Decimal>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DecimalListFormatter<TResolver> Default = new DecimalListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Decimal> value)
        {
			Serialize(ref writer, value, DecimalFormatter<TResolver>.Default);
        }

        public List<Decimal> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DecimalFormatter<TResolver>.Default);
        }	
	}
    public sealed class BooleanFormatter<TResolver> : IJsonFormatter<Boolean, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly BooleanFormatter<TResolver> Default = new BooleanFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Boolean value)
        {
            writer.WriteBoolean(value);
        }

        public Boolean Deserialize(ref JsonReader reader)
        {
            return reader.ReadBoolean();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableBooleanFormatter<TResolver> : NullableFormatter, IJsonFormatter<Boolean?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableBooleanFormatter<TResolver> Default = new NullableBooleanFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Boolean? value)
        {
            Serialize(ref writer, value, BooleanFormatter<TResolver>.Default);
        }

        public Boolean? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, BooleanFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableBooleanArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Boolean?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableBooleanArrayFormatter<TResolver> Default = new NullableBooleanArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Boolean?[] value)
        {
			Serialize(ref writer, value, NullableBooleanFormatter<TResolver>.Default);
        }

        public Boolean?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableBooleanFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableBooleanListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Boolean?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableBooleanListFormatter<TResolver> Default = new NullableBooleanListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Boolean?> value)
        {
			Serialize(ref writer, value, NullableBooleanFormatter<TResolver>.Default);
        }

        public List<Boolean?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableBooleanFormatter<TResolver>.Default);
        }	
	}

    public sealed class BooleanArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Boolean[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly BooleanArrayFormatter<TResolver> Default = new BooleanArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Boolean[] value)
        {
			Serialize(ref writer, value, BooleanFormatter<TResolver>.Default);
        }

        public Boolean[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, BooleanFormatter<TResolver>.Default);
        }
	}

	public sealed class BooleanListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Boolean>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly BooleanListFormatter<TResolver> Default = new BooleanListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Boolean> value)
        {
			Serialize(ref writer, value, BooleanFormatter<TResolver>.Default);
        }

        public List<Boolean> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, BooleanFormatter<TResolver>.Default);
        }	
	}
    public sealed class CharFormatter<TResolver> : IJsonFormatter<Char, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly CharFormatter<TResolver> Default = new CharFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Char value)
        {
            writer.WriteChar(value);
        }

        public Char Deserialize(ref JsonReader reader)
        {
            return reader.ReadChar();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableCharFormatter<TResolver> : NullableFormatter, IJsonFormatter<Char?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableCharFormatter<TResolver> Default = new NullableCharFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Char? value)
        {
            Serialize(ref writer, value, CharFormatter<TResolver>.Default);
        }

        public Char? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, CharFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableCharArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Char?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableCharArrayFormatter<TResolver> Default = new NullableCharArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Char?[] value)
        {
			Serialize(ref writer, value, NullableCharFormatter<TResolver>.Default);
        }

        public Char?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableCharFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableCharListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Char?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableCharListFormatter<TResolver> Default = new NullableCharListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Char?> value)
        {
			Serialize(ref writer, value, NullableCharFormatter<TResolver>.Default);
        }

        public List<Char?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableCharFormatter<TResolver>.Default);
        }	
	}

    public sealed class CharArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Char[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly CharArrayFormatter<TResolver> Default = new CharArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Char[] value)
        {
			Serialize(ref writer, value, CharFormatter<TResolver>.Default);
        }

        public Char[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, CharFormatter<TResolver>.Default);
        }
	}

	public sealed class CharListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Char>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly CharListFormatter<TResolver> Default = new CharListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Char> value)
        {
			Serialize(ref writer, value, CharFormatter<TResolver>.Default);
        }

        public List<Char> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, CharFormatter<TResolver>.Default);
        }	
	}
    public sealed class DateTimeFormatter<TResolver> : IJsonFormatter<DateTime, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeFormatter<TResolver> Default = new DateTimeFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTime value)
        {
            writer.WriteDateTime(value);
        }

        public DateTime Deserialize(ref JsonReader reader)
        {
            return reader.ReadDateTime();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableDateTimeFormatter<TResolver> : NullableFormatter, IJsonFormatter<DateTime?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeFormatter<TResolver> Default = new NullableDateTimeFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTime? value)
        {
            Serialize(ref writer, value, DateTimeFormatter<TResolver>.Default);
        }

        public DateTime? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, DateTimeFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableDateTimeArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<DateTime?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeArrayFormatter<TResolver> Default = new NullableDateTimeArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTime?[] value)
        {
			Serialize(ref writer, value, NullableDateTimeFormatter<TResolver>.Default);
        }

        public DateTime?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDateTimeFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableDateTimeListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<DateTime?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeListFormatter<TResolver> Default = new NullableDateTimeListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<DateTime?> value)
        {
			Serialize(ref writer, value, NullableDateTimeFormatter<TResolver>.Default);
        }

        public List<DateTime?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDateTimeFormatter<TResolver>.Default);
        }	
	}

    public sealed class DateTimeArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<DateTime[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeArrayFormatter<TResolver> Default = new DateTimeArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTime[] value)
        {
			Serialize(ref writer, value, DateTimeFormatter<TResolver>.Default);
        }

        public DateTime[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DateTimeFormatter<TResolver>.Default);
        }
	}

	public sealed class DateTimeListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<DateTime>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeListFormatter<TResolver> Default = new DateTimeListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<DateTime> value)
        {
			Serialize(ref writer, value, DateTimeFormatter<TResolver>.Default);
        }

        public List<DateTime> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DateTimeFormatter<TResolver>.Default);
        }	
	}
    public sealed class DateTimeOffsetFormatter<TResolver> : IJsonFormatter<DateTimeOffset, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeOffsetFormatter<TResolver> Default = new DateTimeOffsetFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTimeOffset value)
        {
            writer.WriteDateTimeOffset(value);
        }

        public DateTimeOffset Deserialize(ref JsonReader reader)
        {
            return reader.ReadDateTimeOffset();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableDateTimeOffsetFormatter<TResolver> : NullableFormatter, IJsonFormatter<DateTimeOffset?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeOffsetFormatter<TResolver> Default = new NullableDateTimeOffsetFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTimeOffset? value)
        {
            Serialize(ref writer, value, DateTimeOffsetFormatter<TResolver>.Default);
        }

        public DateTimeOffset? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, DateTimeOffsetFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableDateTimeOffsetArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<DateTimeOffset?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeOffsetArrayFormatter<TResolver> Default = new NullableDateTimeOffsetArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTimeOffset?[] value)
        {
			Serialize(ref writer, value, NullableDateTimeOffsetFormatter<TResolver>.Default);
        }

        public DateTimeOffset?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDateTimeOffsetFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableDateTimeOffsetListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<DateTimeOffset?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableDateTimeOffsetListFormatter<TResolver> Default = new NullableDateTimeOffsetListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<DateTimeOffset?> value)
        {
			Serialize(ref writer, value, NullableDateTimeOffsetFormatter<TResolver>.Default);
        }

        public List<DateTimeOffset?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableDateTimeOffsetFormatter<TResolver>.Default);
        }	
	}

    public sealed class DateTimeOffsetArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<DateTimeOffset[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeOffsetArrayFormatter<TResolver> Default = new DateTimeOffsetArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, DateTimeOffset[] value)
        {
			Serialize(ref writer, value, DateTimeOffsetFormatter<TResolver>.Default);
        }

        public DateTimeOffset[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DateTimeOffsetFormatter<TResolver>.Default);
        }
	}

	public sealed class DateTimeOffsetListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<DateTimeOffset>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly DateTimeOffsetListFormatter<TResolver> Default = new DateTimeOffsetListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<DateTimeOffset> value)
        {
			Serialize(ref writer, value, DateTimeOffsetFormatter<TResolver>.Default);
        }

        public List<DateTimeOffset> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, DateTimeOffsetFormatter<TResolver>.Default);
        }	
	}
    public sealed class TimeSpanFormatter<TResolver> : IJsonFormatter<TimeSpan, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly TimeSpanFormatter<TResolver> Default = new TimeSpanFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, TimeSpan value)
        {
            writer.WriteTimeSpan(value);
        }

        public TimeSpan Deserialize(ref JsonReader reader)
        {
            return reader.ReadTimeSpan();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableTimeSpanFormatter<TResolver> : NullableFormatter, IJsonFormatter<TimeSpan?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableTimeSpanFormatter<TResolver> Default = new NullableTimeSpanFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, TimeSpan? value)
        {
            Serialize(ref writer, value, TimeSpanFormatter<TResolver>.Default);
        }

        public TimeSpan? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, TimeSpanFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableTimeSpanArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<TimeSpan?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableTimeSpanArrayFormatter<TResolver> Default = new NullableTimeSpanArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, TimeSpan?[] value)
        {
			Serialize(ref writer, value, NullableTimeSpanFormatter<TResolver>.Default);
        }

        public TimeSpan?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableTimeSpanFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableTimeSpanListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<TimeSpan?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableTimeSpanListFormatter<TResolver> Default = new NullableTimeSpanListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<TimeSpan?> value)
        {
			Serialize(ref writer, value, NullableTimeSpanFormatter<TResolver>.Default);
        }

        public List<TimeSpan?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableTimeSpanFormatter<TResolver>.Default);
        }	
	}

    public sealed class TimeSpanArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<TimeSpan[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly TimeSpanArrayFormatter<TResolver> Default = new TimeSpanArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, TimeSpan[] value)
        {
			Serialize(ref writer, value, TimeSpanFormatter<TResolver>.Default);
        }

        public TimeSpan[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, TimeSpanFormatter<TResolver>.Default);
        }
	}

	public sealed class TimeSpanListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<TimeSpan>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly TimeSpanListFormatter<TResolver> Default = new TimeSpanListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<TimeSpan> value)
        {
			Serialize(ref writer, value, TimeSpanFormatter<TResolver>.Default);
        }

        public List<TimeSpan> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, TimeSpanFormatter<TResolver>.Default);
        }	
	}
    public sealed class GuidFormatter<TResolver> : IJsonFormatter<Guid, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly GuidFormatter<TResolver> Default = new GuidFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Guid value)
        {
            writer.WriteGuid(value);
        }

        public Guid Deserialize(ref JsonReader reader)
        {
            return reader.ReadGuid();
        }

		public int AllocSize {get;} = 100;
	} 
	public sealed class NullableGuidFormatter<TResolver> : NullableFormatter, IJsonFormatter<Guid?, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableGuidFormatter<TResolver> Default = new NullableGuidFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Guid? value)
        {
            Serialize(ref writer, value, GuidFormatter<TResolver>.Default);
        }

        public Guid? Deserialize(ref JsonReader reader)
        {
			return Deserialize(ref reader, GuidFormatter<TResolver>.Default);
        }
	}
    public sealed class NullableGuidArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Guid?[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableGuidArrayFormatter<TResolver> Default = new NullableGuidArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Guid?[] value)
        {
			Serialize(ref writer, value, NullableGuidFormatter<TResolver>.Default);
        }

        public Guid?[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableGuidFormatter<TResolver>.Default);
        }
	}

	public sealed class NullableGuidListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Guid?>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly NullableGuidListFormatter<TResolver> Default = new NullableGuidListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Guid?> value)
        {
			Serialize(ref writer, value, NullableGuidFormatter<TResolver>.Default);
        }

        public List<Guid?> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, NullableGuidFormatter<TResolver>.Default);
        }	
	}

    public sealed class GuidArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Guid[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly GuidArrayFormatter<TResolver> Default = new GuidArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Guid[] value)
        {
			Serialize(ref writer, value, GuidFormatter<TResolver>.Default);
        }

        public Guid[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, GuidFormatter<TResolver>.Default);
        }
	}

	public sealed class GuidListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Guid>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly GuidListFormatter<TResolver> Default = new GuidListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Guid> value)
        {
			Serialize(ref writer, value, GuidFormatter<TResolver>.Default);
        }

        public List<Guid> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, GuidFormatter<TResolver>.Default);
        }	
	}
    public sealed class StringFormatter<TResolver> : IJsonFormatter<String, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly StringFormatter<TResolver> Default = new StringFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, String value)
        {
			if(value == null)
			{	
				writer.WriteNull();
				return;
			}
            writer.WriteString(value);
        }

        public String Deserialize(ref JsonReader reader)
        {
            return reader.ReadString();
        }

		public int AllocSize {get;} = 100;
	} 

    public sealed class StringArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<String[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly StringArrayFormatter<TResolver> Default = new StringArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, String[] value)
        {
			Serialize(ref writer, value, StringFormatter<TResolver>.Default);
        }

        public String[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, StringFormatter<TResolver>.Default);
        }
	}

	public sealed class StringListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<String>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly StringListFormatter<TResolver> Default = new StringListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<String> value)
        {
			Serialize(ref writer, value, StringFormatter<TResolver>.Default);
        }

        public List<String> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, StringFormatter<TResolver>.Default);
        }	
	}
    public sealed class VersionFormatter<TResolver> : IJsonFormatter<Version, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly VersionFormatter<TResolver> Default = new VersionFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Version value)
        {
			if(value == null)
			{	
				writer.WriteNull();
				return;
			}
            writer.WriteVersion(value);
        }

        public Version Deserialize(ref JsonReader reader)
        {
            return reader.ReadVersion();
        }

		public int AllocSize {get;} = 100;
	} 

    public sealed class VersionArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Version[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly VersionArrayFormatter<TResolver> Default = new VersionArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Version[] value)
        {
			Serialize(ref writer, value, VersionFormatter<TResolver>.Default);
        }

        public Version[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, VersionFormatter<TResolver>.Default);
        }
	}

	public sealed class VersionListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Version>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly VersionListFormatter<TResolver> Default = new VersionListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Version> value)
        {
			Serialize(ref writer, value, VersionFormatter<TResolver>.Default);
        }

        public List<Version> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, VersionFormatter<TResolver>.Default);
        }	
	}
    public sealed class UriFormatter<TResolver> : IJsonFormatter<Uri, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UriFormatter<TResolver> Default = new UriFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Uri value)
        {
			if(value == null)
			{	
				writer.WriteNull();
				return;
			}
            writer.WriteUri(value);
        }

        public Uri Deserialize(ref JsonReader reader)
        {
            return reader.ReadUri();
        }

		public int AllocSize {get;} = 100;
	} 

    public sealed class UriArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<Uri[], TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UriArrayFormatter<TResolver> Default = new UriArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, Uri[] value)
        {
			Serialize(ref writer, value, UriFormatter<TResolver>.Default);
        }

        public Uri[] Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UriFormatter<TResolver>.Default);
        }
	}

	public sealed class UriListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<Uri>, TResolver> where TResolver : IJsonFormatterResolver<TResolver>, new()
    {
        public static readonly UriListFormatter<TResolver> Default = new UriListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<Uri> value)
        {
			Serialize(ref writer, value, UriFormatter<TResolver>.Default);
        }

        public List<Uri> Deserialize(ref JsonReader reader)
        {
            return Deserialize(ref reader, UriFormatter<TResolver>.Default);
        }	
	}
}