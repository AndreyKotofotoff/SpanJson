using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Formatters;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters
{
    public sealed class SByteFormatter<TSymbol, TResolver> : IJsonFormatter<SByte, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SByteFormatter<TSymbol,TResolver> Default = new SByteFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, SByte value)
        {
            writer.WriteUtf16SByte(value);
        }

        public SByte Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16SByte();
        }
	} 
	public sealed class NullableSByteFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<SByte?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSByteFormatter<TSymbol,TResolver> Default = new NullableSByteFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, SByte? value)
        {
            Serialize(ref writer, value, SByteFormatter<TSymbol,TResolver>.Default);
        }

        public SByte? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, SByteFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableSByteArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<SByte?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSByteArrayFormatter<TSymbol,TResolver> Default = new NullableSByteArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, SByte?[] value)
        {
			Serialize(ref writer, value, NullableSByteFormatter<TSymbol,TResolver>.Default);
        }

        public SByte?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableSByteFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableSByteListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<SByte?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSByteListFormatter<TSymbol,TResolver> Default = new NullableSByteListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<SByte?>> CreateFunctor = () => new List<SByte?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<SByte?> value)
        {
			Serialize(ref writer, value, NullableSByteFormatter<TSymbol,TResolver>.Default);
        }

        public List<SByte?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableSByteFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class SByteArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<SByte[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SByteArrayFormatter<TSymbol,TResolver> Default = new SByteArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, SByte[] value)
        {
			Serialize(ref writer, value, SByteFormatter<TSymbol, TResolver>.Default);
        }

        public SByte[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, SByteFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class SByteListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<SByte>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SByteListFormatter<TSymbol,TResolver> Default = new SByteListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<SByte>> CreateFunctor = () => new List<SByte>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<SByte> value)
        {
			Serialize(ref writer, value, SByteFormatter<TSymbol, TResolver>.Default);
        }

        public List<SByte> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, SByteFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class Int16Formatter<TSymbol, TResolver> : IJsonFormatter<Int16, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int16Formatter<TSymbol,TResolver> Default = new Int16Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int16 value)
        {
            writer.WriteUtf16Int16(value);
        }

        public Int16 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Int16();
        }
	} 
	public sealed class NullableInt16Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Int16?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt16Formatter<TSymbol,TResolver> Default = new NullableInt16Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int16? value)
        {
            Serialize(ref writer, value, Int16Formatter<TSymbol,TResolver>.Default);
        }

        public Int16? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, Int16Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableInt16ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int16?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt16ArrayFormatter<TSymbol,TResolver> Default = new NullableInt16ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int16?[] value)
        {
			Serialize(ref writer, value, NullableInt16Formatter<TSymbol,TResolver>.Default);
        }

        public Int16?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt16Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableInt16ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int16?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt16ListFormatter<TSymbol,TResolver> Default = new NullableInt16ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Int16?>> CreateFunctor = () => new List<Int16?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int16?> value)
        {
			Serialize(ref writer, value, NullableInt16Formatter<TSymbol,TResolver>.Default);
        }

        public List<Int16?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt16Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class Int16ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int16[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int16ArrayFormatter<TSymbol,TResolver> Default = new Int16ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int16[] value)
        {
			Serialize(ref writer, value, Int16Formatter<TSymbol, TResolver>.Default);
        }

        public Int16[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int16Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class Int16ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int16>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int16ListFormatter<TSymbol,TResolver> Default = new Int16ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Int16>> CreateFunctor = () => new List<Int16>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int16> value)
        {
			Serialize(ref writer, value, Int16Formatter<TSymbol, TResolver>.Default);
        }

        public List<Int16> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int16Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class Int32Formatter<TSymbol, TResolver> : IJsonFormatter<Int32, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int32Formatter<TSymbol,TResolver> Default = new Int32Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int32 value)
        {
            writer.WriteUtf16Int32(value);
        }

        public Int32 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Int32();
        }
	} 
	public sealed class NullableInt32Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Int32?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt32Formatter<TSymbol,TResolver> Default = new NullableInt32Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int32? value)
        {
            Serialize(ref writer, value, Int32Formatter<TSymbol,TResolver>.Default);
        }

        public Int32? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, Int32Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableInt32ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int32?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt32ArrayFormatter<TSymbol,TResolver> Default = new NullableInt32ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int32?[] value)
        {
			Serialize(ref writer, value, NullableInt32Formatter<TSymbol,TResolver>.Default);
        }

        public Int32?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt32Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableInt32ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int32?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt32ListFormatter<TSymbol,TResolver> Default = new NullableInt32ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Int32?>> CreateFunctor = () => new List<Int32?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int32?> value)
        {
			Serialize(ref writer, value, NullableInt32Formatter<TSymbol,TResolver>.Default);
        }

        public List<Int32?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt32Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class Int32ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int32[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int32ArrayFormatter<TSymbol,TResolver> Default = new Int32ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int32[] value)
        {
			Serialize(ref writer, value, Int32Formatter<TSymbol, TResolver>.Default);
        }

        public Int32[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int32Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class Int32ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int32>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int32ListFormatter<TSymbol,TResolver> Default = new Int32ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Int32>> CreateFunctor = () => new List<Int32>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int32> value)
        {
			Serialize(ref writer, value, Int32Formatter<TSymbol, TResolver>.Default);
        }

        public List<Int32> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int32Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class Int64Formatter<TSymbol, TResolver> : IJsonFormatter<Int64, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int64Formatter<TSymbol,TResolver> Default = new Int64Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int64 value)
        {
            writer.WriteUtf16Int64(value);
        }

        public Int64 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Int64();
        }
	} 
	public sealed class NullableInt64Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Int64?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt64Formatter<TSymbol,TResolver> Default = new NullableInt64Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int64? value)
        {
            Serialize(ref writer, value, Int64Formatter<TSymbol,TResolver>.Default);
        }

        public Int64? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, Int64Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableInt64ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int64?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt64ArrayFormatter<TSymbol,TResolver> Default = new NullableInt64ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int64?[] value)
        {
			Serialize(ref writer, value, NullableInt64Formatter<TSymbol,TResolver>.Default);
        }

        public Int64?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt64Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableInt64ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int64?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableInt64ListFormatter<TSymbol,TResolver> Default = new NullableInt64ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Int64?>> CreateFunctor = () => new List<Int64?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int64?> value)
        {
			Serialize(ref writer, value, NullableInt64Formatter<TSymbol,TResolver>.Default);
        }

        public List<Int64?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableInt64Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class Int64ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Int64[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int64ArrayFormatter<TSymbol,TResolver> Default = new Int64ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Int64[] value)
        {
			Serialize(ref writer, value, Int64Formatter<TSymbol, TResolver>.Default);
        }

        public Int64[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int64Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class Int64ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Int64>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly Int64ListFormatter<TSymbol,TResolver> Default = new Int64ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Int64>> CreateFunctor = () => new List<Int64>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Int64> value)
        {
			Serialize(ref writer, value, Int64Formatter<TSymbol, TResolver>.Default);
        }

        public List<Int64> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, Int64Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class ByteFormatter<TSymbol, TResolver> : IJsonFormatter<Byte, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly ByteFormatter<TSymbol,TResolver> Default = new ByteFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Byte value)
        {
            writer.WriteUtf16Byte(value);
        }

        public Byte Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Byte();
        }
	} 
	public sealed class NullableByteFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Byte?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableByteFormatter<TSymbol,TResolver> Default = new NullableByteFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Byte? value)
        {
            Serialize(ref writer, value, ByteFormatter<TSymbol,TResolver>.Default);
        }

        public Byte? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, ByteFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableByteArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Byte?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableByteArrayFormatter<TSymbol,TResolver> Default = new NullableByteArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Byte?[] value)
        {
			Serialize(ref writer, value, NullableByteFormatter<TSymbol,TResolver>.Default);
        }

        public Byte?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableByteFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableByteListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Byte?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableByteListFormatter<TSymbol,TResolver> Default = new NullableByteListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Byte?>> CreateFunctor = () => new List<Byte?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Byte?> value)
        {
			Serialize(ref writer, value, NullableByteFormatter<TSymbol,TResolver>.Default);
        }

        public List<Byte?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableByteFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class ByteArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Byte[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly ByteArrayFormatter<TSymbol,TResolver> Default = new ByteArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Byte[] value)
        {
			Serialize(ref writer, value, ByteFormatter<TSymbol, TResolver>.Default);
        }

        public Byte[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, ByteFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class ByteListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Byte>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly ByteListFormatter<TSymbol,TResolver> Default = new ByteListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Byte>> CreateFunctor = () => new List<Byte>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Byte> value)
        {
			Serialize(ref writer, value, ByteFormatter<TSymbol, TResolver>.Default);
        }

        public List<Byte> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, ByteFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class UInt16Formatter<TSymbol, TResolver> : IJsonFormatter<UInt16, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt16Formatter<TSymbol,TResolver> Default = new UInt16Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt16 value)
        {
            writer.WriteUtf16UInt16(value);
        }

        public UInt16 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16UInt16();
        }
	} 
	public sealed class NullableUInt16Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<UInt16?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt16Formatter<TSymbol,TResolver> Default = new NullableUInt16Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt16? value)
        {
            Serialize(ref writer, value, UInt16Formatter<TSymbol,TResolver>.Default);
        }

        public UInt16? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, UInt16Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableUInt16ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt16?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt16ArrayFormatter<TSymbol,TResolver> Default = new NullableUInt16ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt16?[] value)
        {
			Serialize(ref writer, value, NullableUInt16Formatter<TSymbol,TResolver>.Default);
        }

        public UInt16?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt16Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableUInt16ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt16?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt16ListFormatter<TSymbol,TResolver> Default = new NullableUInt16ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<UInt16?>> CreateFunctor = () => new List<UInt16?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt16?> value)
        {
			Serialize(ref writer, value, NullableUInt16Formatter<TSymbol,TResolver>.Default);
        }

        public List<UInt16?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt16Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class UInt16ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt16[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt16ArrayFormatter<TSymbol,TResolver> Default = new UInt16ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt16[] value)
        {
			Serialize(ref writer, value, UInt16Formatter<TSymbol, TResolver>.Default);
        }

        public UInt16[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt16Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class UInt16ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt16>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt16ListFormatter<TSymbol,TResolver> Default = new UInt16ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<UInt16>> CreateFunctor = () => new List<UInt16>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt16> value)
        {
			Serialize(ref writer, value, UInt16Formatter<TSymbol, TResolver>.Default);
        }

        public List<UInt16> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt16Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class UInt32Formatter<TSymbol, TResolver> : IJsonFormatter<UInt32, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt32Formatter<TSymbol,TResolver> Default = new UInt32Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt32 value)
        {
            writer.WriteUtf16UInt32(value);
        }

        public UInt32 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16UInt32();
        }
	} 
	public sealed class NullableUInt32Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<UInt32?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt32Formatter<TSymbol,TResolver> Default = new NullableUInt32Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt32? value)
        {
            Serialize(ref writer, value, UInt32Formatter<TSymbol,TResolver>.Default);
        }

        public UInt32? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, UInt32Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableUInt32ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt32?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt32ArrayFormatter<TSymbol,TResolver> Default = new NullableUInt32ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt32?[] value)
        {
			Serialize(ref writer, value, NullableUInt32Formatter<TSymbol,TResolver>.Default);
        }

        public UInt32?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt32Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableUInt32ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt32?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt32ListFormatter<TSymbol,TResolver> Default = new NullableUInt32ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<UInt32?>> CreateFunctor = () => new List<UInt32?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt32?> value)
        {
			Serialize(ref writer, value, NullableUInt32Formatter<TSymbol,TResolver>.Default);
        }

        public List<UInt32?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt32Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class UInt32ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt32[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt32ArrayFormatter<TSymbol,TResolver> Default = new UInt32ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt32[] value)
        {
			Serialize(ref writer, value, UInt32Formatter<TSymbol, TResolver>.Default);
        }

        public UInt32[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt32Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class UInt32ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt32>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt32ListFormatter<TSymbol,TResolver> Default = new UInt32ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<UInt32>> CreateFunctor = () => new List<UInt32>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt32> value)
        {
			Serialize(ref writer, value, UInt32Formatter<TSymbol, TResolver>.Default);
        }

        public List<UInt32> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt32Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class UInt64Formatter<TSymbol, TResolver> : IJsonFormatter<UInt64, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt64Formatter<TSymbol,TResolver> Default = new UInt64Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt64 value)
        {
            writer.WriteUtf16UInt64(value);
        }

        public UInt64 Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16UInt64();
        }
	} 
	public sealed class NullableUInt64Formatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<UInt64?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt64Formatter<TSymbol,TResolver> Default = new NullableUInt64Formatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt64? value)
        {
            Serialize(ref writer, value, UInt64Formatter<TSymbol,TResolver>.Default);
        }

        public UInt64? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, UInt64Formatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableUInt64ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt64?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt64ArrayFormatter<TSymbol,TResolver> Default = new NullableUInt64ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt64?[] value)
        {
			Serialize(ref writer, value, NullableUInt64Formatter<TSymbol,TResolver>.Default);
        }

        public UInt64?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt64Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableUInt64ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt64?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableUInt64ListFormatter<TSymbol,TResolver> Default = new NullableUInt64ListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<UInt64?>> CreateFunctor = () => new List<UInt64?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt64?> value)
        {
			Serialize(ref writer, value, NullableUInt64Formatter<TSymbol,TResolver>.Default);
        }

        public List<UInt64?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableUInt64Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class UInt64ArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<UInt64[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt64ArrayFormatter<TSymbol,TResolver> Default = new UInt64ArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, UInt64[] value)
        {
			Serialize(ref writer, value, UInt64Formatter<TSymbol, TResolver>.Default);
        }

        public UInt64[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt64Formatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class UInt64ListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<UInt64>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UInt64ListFormatter<TSymbol,TResolver> Default = new UInt64ListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<UInt64>> CreateFunctor = () => new List<UInt64>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<UInt64> value)
        {
			Serialize(ref writer, value, UInt64Formatter<TSymbol, TResolver>.Default);
        }

        public List<UInt64> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UInt64Formatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class SingleFormatter<TSymbol, TResolver> : IJsonFormatter<Single, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SingleFormatter<TSymbol,TResolver> Default = new SingleFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Single value)
        {
            writer.WriteUtf16Single(value);
        }

        public Single Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Single();
        }
	} 
	public sealed class NullableSingleFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Single?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSingleFormatter<TSymbol,TResolver> Default = new NullableSingleFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Single? value)
        {
            Serialize(ref writer, value, SingleFormatter<TSymbol,TResolver>.Default);
        }

        public Single? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, SingleFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableSingleArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Single?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSingleArrayFormatter<TSymbol,TResolver> Default = new NullableSingleArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Single?[] value)
        {
			Serialize(ref writer, value, NullableSingleFormatter<TSymbol,TResolver>.Default);
        }

        public Single?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableSingleFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableSingleListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Single?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableSingleListFormatter<TSymbol,TResolver> Default = new NullableSingleListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Single?>> CreateFunctor = () => new List<Single?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Single?> value)
        {
			Serialize(ref writer, value, NullableSingleFormatter<TSymbol,TResolver>.Default);
        }

        public List<Single?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableSingleFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class SingleArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Single[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SingleArrayFormatter<TSymbol,TResolver> Default = new SingleArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Single[] value)
        {
			Serialize(ref writer, value, SingleFormatter<TSymbol, TResolver>.Default);
        }

        public Single[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, SingleFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class SingleListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Single>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly SingleListFormatter<TSymbol,TResolver> Default = new SingleListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Single>> CreateFunctor = () => new List<Single>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Single> value)
        {
			Serialize(ref writer, value, SingleFormatter<TSymbol, TResolver>.Default);
        }

        public List<Single> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, SingleFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class DoubleFormatter<TSymbol, TResolver> : IJsonFormatter<Double, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DoubleFormatter<TSymbol,TResolver> Default = new DoubleFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Double value)
        {
            writer.WriteUtf16Double(value);
        }

        public Double Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Double();
        }
	} 
	public sealed class NullableDoubleFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Double?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDoubleFormatter<TSymbol,TResolver> Default = new NullableDoubleFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Double? value)
        {
            Serialize(ref writer, value, DoubleFormatter<TSymbol,TResolver>.Default);
        }

        public Double? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, DoubleFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableDoubleArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Double?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDoubleArrayFormatter<TSymbol,TResolver> Default = new NullableDoubleArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Double?[] value)
        {
			Serialize(ref writer, value, NullableDoubleFormatter<TSymbol,TResolver>.Default);
        }

        public Double?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDoubleFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableDoubleListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Double?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDoubleListFormatter<TSymbol,TResolver> Default = new NullableDoubleListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Double?>> CreateFunctor = () => new List<Double?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Double?> value)
        {
			Serialize(ref writer, value, NullableDoubleFormatter<TSymbol,TResolver>.Default);
        }

        public List<Double?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDoubleFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class DoubleArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Double[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DoubleArrayFormatter<TSymbol,TResolver> Default = new DoubleArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Double[] value)
        {
			Serialize(ref writer, value, DoubleFormatter<TSymbol, TResolver>.Default);
        }

        public Double[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DoubleFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class DoubleListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Double>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DoubleListFormatter<TSymbol,TResolver> Default = new DoubleListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Double>> CreateFunctor = () => new List<Double>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Double> value)
        {
			Serialize(ref writer, value, DoubleFormatter<TSymbol, TResolver>.Default);
        }

        public List<Double> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DoubleFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class DecimalFormatter<TSymbol, TResolver> : IJsonFormatter<Decimal, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DecimalFormatter<TSymbol,TResolver> Default = new DecimalFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Decimal value)
        {
            writer.WriteUtf16Decimal(value);
        }

        public Decimal Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Decimal();
        }
	} 
	public sealed class NullableDecimalFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Decimal?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDecimalFormatter<TSymbol,TResolver> Default = new NullableDecimalFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Decimal? value)
        {
            Serialize(ref writer, value, DecimalFormatter<TSymbol,TResolver>.Default);
        }

        public Decimal? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, DecimalFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableDecimalArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Decimal?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDecimalArrayFormatter<TSymbol,TResolver> Default = new NullableDecimalArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Decimal?[] value)
        {
			Serialize(ref writer, value, NullableDecimalFormatter<TSymbol,TResolver>.Default);
        }

        public Decimal?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDecimalFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableDecimalListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Decimal?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDecimalListFormatter<TSymbol,TResolver> Default = new NullableDecimalListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Decimal?>> CreateFunctor = () => new List<Decimal?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Decimal?> value)
        {
			Serialize(ref writer, value, NullableDecimalFormatter<TSymbol,TResolver>.Default);
        }

        public List<Decimal?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDecimalFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class DecimalArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Decimal[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DecimalArrayFormatter<TSymbol,TResolver> Default = new DecimalArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Decimal[] value)
        {
			Serialize(ref writer, value, DecimalFormatter<TSymbol, TResolver>.Default);
        }

        public Decimal[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DecimalFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class DecimalListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Decimal>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DecimalListFormatter<TSymbol,TResolver> Default = new DecimalListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Decimal>> CreateFunctor = () => new List<Decimal>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Decimal> value)
        {
			Serialize(ref writer, value, DecimalFormatter<TSymbol, TResolver>.Default);
        }

        public List<Decimal> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DecimalFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class BooleanFormatter<TSymbol, TResolver> : IJsonFormatter<Boolean, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly BooleanFormatter<TSymbol,TResolver> Default = new BooleanFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Boolean value)
        {
            writer.WriteUtf16Boolean(value);
        }

        public Boolean Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Boolean();
        }
	} 
	public sealed class NullableBooleanFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Boolean?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableBooleanFormatter<TSymbol,TResolver> Default = new NullableBooleanFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Boolean? value)
        {
            Serialize(ref writer, value, BooleanFormatter<TSymbol,TResolver>.Default);
        }

        public Boolean? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, BooleanFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableBooleanArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Boolean?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableBooleanArrayFormatter<TSymbol,TResolver> Default = new NullableBooleanArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Boolean?[] value)
        {
			Serialize(ref writer, value, NullableBooleanFormatter<TSymbol,TResolver>.Default);
        }

        public Boolean?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableBooleanFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableBooleanListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Boolean?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableBooleanListFormatter<TSymbol,TResolver> Default = new NullableBooleanListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Boolean?>> CreateFunctor = () => new List<Boolean?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Boolean?> value)
        {
			Serialize(ref writer, value, NullableBooleanFormatter<TSymbol,TResolver>.Default);
        }

        public List<Boolean?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableBooleanFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class BooleanArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Boolean[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly BooleanArrayFormatter<TSymbol,TResolver> Default = new BooleanArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Boolean[] value)
        {
			Serialize(ref writer, value, BooleanFormatter<TSymbol, TResolver>.Default);
        }

        public Boolean[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, BooleanFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class BooleanListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Boolean>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly BooleanListFormatter<TSymbol,TResolver> Default = new BooleanListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Boolean>> CreateFunctor = () => new List<Boolean>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Boolean> value)
        {
			Serialize(ref writer, value, BooleanFormatter<TSymbol, TResolver>.Default);
        }

        public List<Boolean> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, BooleanFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class CharFormatter<TSymbol, TResolver> : IJsonFormatter<Char, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly CharFormatter<TSymbol,TResolver> Default = new CharFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Char value)
        {
            writer.WriteUtf16Char(value);
        }

        public Char Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Char();
        }
	} 
	public sealed class NullableCharFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Char?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableCharFormatter<TSymbol,TResolver> Default = new NullableCharFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Char? value)
        {
            Serialize(ref writer, value, CharFormatter<TSymbol,TResolver>.Default);
        }

        public Char? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, CharFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableCharArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Char?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableCharArrayFormatter<TSymbol,TResolver> Default = new NullableCharArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Char?[] value)
        {
			Serialize(ref writer, value, NullableCharFormatter<TSymbol,TResolver>.Default);
        }

        public Char?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableCharFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableCharListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Char?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableCharListFormatter<TSymbol,TResolver> Default = new NullableCharListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Char?>> CreateFunctor = () => new List<Char?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Char?> value)
        {
			Serialize(ref writer, value, NullableCharFormatter<TSymbol,TResolver>.Default);
        }

        public List<Char?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableCharFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class CharArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Char[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly CharArrayFormatter<TSymbol,TResolver> Default = new CharArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Char[] value)
        {
			Serialize(ref writer, value, CharFormatter<TSymbol, TResolver>.Default);
        }

        public Char[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, CharFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class CharListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Char>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly CharListFormatter<TSymbol,TResolver> Default = new CharListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Char>> CreateFunctor = () => new List<Char>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Char> value)
        {
			Serialize(ref writer, value, CharFormatter<TSymbol, TResolver>.Default);
        }

        public List<Char> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, CharFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class DateTimeFormatter<TSymbol, TResolver> : IJsonFormatter<DateTime, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeFormatter<TSymbol,TResolver> Default = new DateTimeFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTime value)
        {
            writer.WriteUtf16DateTime(value);
        }

        public DateTime Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16DateTime();
        }
	} 
	public sealed class NullableDateTimeFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<DateTime?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeFormatter<TSymbol,TResolver> Default = new NullableDateTimeFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTime? value)
        {
            Serialize(ref writer, value, DateTimeFormatter<TSymbol,TResolver>.Default);
        }

        public DateTime? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, DateTimeFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableDateTimeArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<DateTime?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeArrayFormatter<TSymbol,TResolver> Default = new NullableDateTimeArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTime?[] value)
        {
			Serialize(ref writer, value, NullableDateTimeFormatter<TSymbol,TResolver>.Default);
        }

        public DateTime?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDateTimeFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableDateTimeListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<DateTime?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeListFormatter<TSymbol,TResolver> Default = new NullableDateTimeListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<DateTime?>> CreateFunctor = () => new List<DateTime?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<DateTime?> value)
        {
			Serialize(ref writer, value, NullableDateTimeFormatter<TSymbol,TResolver>.Default);
        }

        public List<DateTime?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDateTimeFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class DateTimeArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<DateTime[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeArrayFormatter<TSymbol,TResolver> Default = new DateTimeArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTime[] value)
        {
			Serialize(ref writer, value, DateTimeFormatter<TSymbol, TResolver>.Default);
        }

        public DateTime[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DateTimeFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class DateTimeListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<DateTime>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeListFormatter<TSymbol,TResolver> Default = new DateTimeListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<DateTime>> CreateFunctor = () => new List<DateTime>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<DateTime> value)
        {
			Serialize(ref writer, value, DateTimeFormatter<TSymbol, TResolver>.Default);
        }

        public List<DateTime> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DateTimeFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class DateTimeOffsetFormatter<TSymbol, TResolver> : IJsonFormatter<DateTimeOffset, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeOffsetFormatter<TSymbol,TResolver> Default = new DateTimeOffsetFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTimeOffset value)
        {
            writer.WriteUtf16DateTimeOffset(value);
        }

        public DateTimeOffset Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16DateTimeOffset();
        }
	} 
	public sealed class NullableDateTimeOffsetFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<DateTimeOffset?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeOffsetFormatter<TSymbol,TResolver> Default = new NullableDateTimeOffsetFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTimeOffset? value)
        {
            Serialize(ref writer, value, DateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }

        public DateTimeOffset? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, DateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableDateTimeOffsetArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<DateTimeOffset?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeOffsetArrayFormatter<TSymbol,TResolver> Default = new NullableDateTimeOffsetArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTimeOffset?[] value)
        {
			Serialize(ref writer, value, NullableDateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }

        public DateTimeOffset?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableDateTimeOffsetListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<DateTimeOffset?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableDateTimeOffsetListFormatter<TSymbol,TResolver> Default = new NullableDateTimeOffsetListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<DateTimeOffset?>> CreateFunctor = () => new List<DateTimeOffset?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<DateTimeOffset?> value)
        {
			Serialize(ref writer, value, NullableDateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }

        public List<DateTimeOffset?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableDateTimeOffsetFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class DateTimeOffsetArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<DateTimeOffset[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeOffsetArrayFormatter<TSymbol,TResolver> Default = new DateTimeOffsetArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, DateTimeOffset[] value)
        {
			Serialize(ref writer, value, DateTimeOffsetFormatter<TSymbol, TResolver>.Default);
        }

        public DateTimeOffset[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DateTimeOffsetFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class DateTimeOffsetListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<DateTimeOffset>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly DateTimeOffsetListFormatter<TSymbol,TResolver> Default = new DateTimeOffsetListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<DateTimeOffset>> CreateFunctor = () => new List<DateTimeOffset>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<DateTimeOffset> value)
        {
			Serialize(ref writer, value, DateTimeOffsetFormatter<TSymbol, TResolver>.Default);
        }

        public List<DateTimeOffset> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, DateTimeOffsetFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class TimeSpanFormatter<TSymbol, TResolver> : IJsonFormatter<TimeSpan, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly TimeSpanFormatter<TSymbol,TResolver> Default = new TimeSpanFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, TimeSpan value)
        {
            writer.WriteUtf16TimeSpan(value);
        }

        public TimeSpan Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16TimeSpan();
        }
	} 
	public sealed class NullableTimeSpanFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<TimeSpan?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableTimeSpanFormatter<TSymbol,TResolver> Default = new NullableTimeSpanFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, TimeSpan? value)
        {
            Serialize(ref writer, value, TimeSpanFormatter<TSymbol,TResolver>.Default);
        }

        public TimeSpan? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, TimeSpanFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableTimeSpanArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<TimeSpan?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableTimeSpanArrayFormatter<TSymbol,TResolver> Default = new NullableTimeSpanArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, TimeSpan?[] value)
        {
			Serialize(ref writer, value, NullableTimeSpanFormatter<TSymbol,TResolver>.Default);
        }

        public TimeSpan?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableTimeSpanFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableTimeSpanListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<TimeSpan?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableTimeSpanListFormatter<TSymbol,TResolver> Default = new NullableTimeSpanListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<TimeSpan?>> CreateFunctor = () => new List<TimeSpan?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<TimeSpan?> value)
        {
			Serialize(ref writer, value, NullableTimeSpanFormatter<TSymbol,TResolver>.Default);
        }

        public List<TimeSpan?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableTimeSpanFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class TimeSpanArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<TimeSpan[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly TimeSpanArrayFormatter<TSymbol,TResolver> Default = new TimeSpanArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, TimeSpan[] value)
        {
			Serialize(ref writer, value, TimeSpanFormatter<TSymbol, TResolver>.Default);
        }

        public TimeSpan[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, TimeSpanFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class TimeSpanListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<TimeSpan>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly TimeSpanListFormatter<TSymbol,TResolver> Default = new TimeSpanListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<TimeSpan>> CreateFunctor = () => new List<TimeSpan>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<TimeSpan> value)
        {
			Serialize(ref writer, value, TimeSpanFormatter<TSymbol, TResolver>.Default);
        }

        public List<TimeSpan> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, TimeSpanFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class GuidFormatter<TSymbol, TResolver> : IJsonFormatter<Guid, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly GuidFormatter<TSymbol,TResolver> Default = new GuidFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Guid value)
        {
            writer.WriteUtf16Guid(value);
        }

        public Guid Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Guid();
        }
	} 
	public sealed class NullableGuidFormatter<TSymbol,TResolver> : NullableFormatter, IJsonFormatter<Guid?, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableGuidFormatter<TSymbol,TResolver> Default = new NullableGuidFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Guid? value)
        {
            Serialize(ref writer, value, GuidFormatter<TSymbol,TResolver>.Default);
        }

        public Guid? Deserialize(ref JsonReader<TSymbol> reader)
        {
			return Deserialize(ref reader, GuidFormatter<TSymbol,TResolver>.Default);
        }
	}
    public sealed class NullableGuidArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Guid?[], TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableGuidArrayFormatter<TSymbol,TResolver> Default = new NullableGuidArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Guid?[] value)
        {
			Serialize(ref writer, value, NullableGuidFormatter<TSymbol,TResolver>.Default);
        }

        public Guid?[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableGuidFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class NullableGuidListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Guid?>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly NullableGuidListFormatter<TSymbol,TResolver> Default = new NullableGuidListFormatter<TSymbol,TResolver>();
		private static readonly Func<List<Guid?>> CreateFunctor = () => new List<Guid?>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Guid?> value)
        {
			Serialize(ref writer, value, NullableGuidFormatter<TSymbol,TResolver>.Default);
        }

        public List<Guid?> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, NullableGuidFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}

    public sealed class GuidArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Guid[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly GuidArrayFormatter<TSymbol,TResolver> Default = new GuidArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Guid[] value)
        {
			Serialize(ref writer, value, GuidFormatter<TSymbol, TResolver>.Default);
        }

        public Guid[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, GuidFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class GuidListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Guid>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly GuidListFormatter<TSymbol,TResolver> Default = new GuidListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Guid>> CreateFunctor = () => new List<Guid>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Guid> value)
        {
			Serialize(ref writer, value, GuidFormatter<TSymbol, TResolver>.Default);
        }

        public List<Guid> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, GuidFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class StringFormatter<TSymbol, TResolver> : IJsonFormatter<String, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly StringFormatter<TSymbol,TResolver> Default = new StringFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, String value)
        {
			if(value == null)
			{	
				writer.WriteUtf16Null();
				return;
			}
            writer.WriteUtf16String(value);
        }

        public String Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16String();
        }
	} 

    public sealed class StringArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<String[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly StringArrayFormatter<TSymbol,TResolver> Default = new StringArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, String[] value)
        {
			Serialize(ref writer, value, StringFormatter<TSymbol, TResolver>.Default);
        }

        public String[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, StringFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class StringListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<String>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly StringListFormatter<TSymbol,TResolver> Default = new StringListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<String>> CreateFunctor = () => new List<String>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<String> value)
        {
			Serialize(ref writer, value, StringFormatter<TSymbol, TResolver>.Default);
        }

        public List<String> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, StringFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class VersionFormatter<TSymbol, TResolver> : IJsonFormatter<Version, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly VersionFormatter<TSymbol,TResolver> Default = new VersionFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Version value)
        {
			if(value == null)
			{	
				writer.WriteUtf16Null();
				return;
			}
            writer.WriteUtf16Version(value);
        }

        public Version Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Version();
        }
	} 

    public sealed class VersionArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Version[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly VersionArrayFormatter<TSymbol,TResolver> Default = new VersionArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Version[] value)
        {
			Serialize(ref writer, value, VersionFormatter<TSymbol, TResolver>.Default);
        }

        public Version[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, VersionFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class VersionListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Version>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly VersionListFormatter<TSymbol,TResolver> Default = new VersionListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Version>> CreateFunctor = () => new List<Version>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Version> value)
        {
			Serialize(ref writer, value, VersionFormatter<TSymbol, TResolver>.Default);
        }

        public List<Version> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, VersionFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
    public sealed class UriFormatter<TSymbol, TResolver> : IJsonFormatter<Uri, TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UriFormatter<TSymbol,TResolver> Default = new UriFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Uri value)
        {
			if(value == null)
			{	
				writer.WriteUtf16Null();
				return;
			}
            writer.WriteUtf16Uri(value);
        }

        public Uri Deserialize(ref JsonReader<TSymbol> reader)
        {
            return reader.ReadUtf16Uri();
        }
	} 

    public sealed class UriArrayFormatter<TSymbol,TResolver> : ArrayFormatter, IJsonFormatter<Uri[], TSymbol, TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UriArrayFormatter<TSymbol,TResolver> Default = new UriArrayFormatter<TSymbol,TResolver>();

        public void Serialize(ref JsonWriter<TSymbol> writer, Uri[] value)
        {
			Serialize(ref writer, value, UriFormatter<TSymbol, TResolver>.Default);
        }

        public Uri[] Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UriFormatter<TSymbol,TResolver>.Default);
        }
	}

	public sealed class UriListFormatter<TSymbol,TResolver> : ListFormatter, IJsonFormatter<List<Uri>, TSymbol,TResolver> where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct
    {
        public static readonly UriListFormatter<TSymbol,TResolver> Default = new UriListFormatter<TSymbol, TResolver>();
		private static readonly Func<List<Uri>> CreateFunctor = () => new List<Uri>();

        public void Serialize(ref JsonWriter<TSymbol> writer, List<Uri> value)
        {
			Serialize(ref writer, value, UriFormatter<TSymbol, TResolver>.Default);
        }

        public List<Uri> Deserialize(ref JsonReader<TSymbol> reader)
        {
            return Deserialize(ref reader, UriFormatter<TSymbol,TResolver>.Default, CreateFunctor);
        }	
	}
}