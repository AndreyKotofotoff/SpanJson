<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte), 
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool), 
		typeof(char),
		typeof(DateTime),
		typeof(DateTimeOffset), 
		typeof(TimeSpan),
		typeof(Guid),
		typeof(string),
		typeof(decimal),
    };
#>
using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Formatters;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters.Generated
{
<# foreach(var t in types) {  #>
    public sealed class <#= t.Name #>Formatter<TResolver> : IJsonFormatter<<#= t.Name #>, TResolver> where TResolver: IJsonFormatterResolver, new()
    {
        public static readonly <#= t.Name #>Formatter<TResolver> Default = new <#= t.Name #>Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, <#= t.Name #> value, TResolver formatterResolver)
        {
            writer.Write<#= t.Name #>(value);
        }

        public <#= t.Name #> Deserialize(ref JsonReader reader, TResolver formatterResolver)
        {
            return reader.Read<#= t.Name #>();
        }

		public int AllocSize {get;} = 100;
	} 
<# if(t.IsValueType) { #>
	public sealed class Nullable<#= t.Name #>Formatter<TResolver> : NullableFormatter, IJsonFormatter<<#= t.Name #>?, TResolver> where TResolver: IJsonFormatterResolver, new()
    {
        public static readonly Nullable<#= t.Name #>Formatter<TResolver> Default = new Nullable<#= t.Name #>Formatter<TResolver>();

        public void Serialize(ref JsonWriter writer, <#= t.Name #>? value, TResolver formatterResolver)
        {
            Serialize(ref writer, value, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }

        public <#= t.Name #>? Deserialize(ref JsonReader reader, TResolver formatterResolver)
        {
			return Deserialize(ref reader, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }
	}
<# } #>

    public sealed class <#= t.Name #>ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<<#= t.Name #>[], TResolver> where TResolver: IJsonFormatterResolver, new()
    {
        public static readonly <#= t.Name #>ArrayFormatter<TResolver> Default = new <#= t.Name #>ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, <#= t.Name #>[] value, TResolver formatterResolver)
        {
			Serialize(ref writer, value, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }

        public <#= t.Name #>[] Deserialize(ref JsonReader reader, TResolver formatterResolver)
        {
            return Deserialize(ref reader, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }
	}

	public sealed class <#= t.Name #>ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<<#= t.Name #>>, TResolver> where TResolver: IJsonFormatterResolver, new()
    {
        public static readonly <#= t.Name #>ListFormatter<TResolver> Default = new <#= t.Name #>ListFormatter<TResolver>();

        public void Serialize(ref JsonWriter writer, List<<#= t.Name #>> value, TResolver formatterResolver)
        {
			Serialize(ref writer, value, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }

        public List<<#= t.Name #>> Deserialize(ref JsonReader reader, TResolver formatterResolver)
        {
            return Deserialize(ref reader, <#= t.Name #>Formatter<TResolver>.Default, formatterResolver);
        }	
	}
<# } #>
}