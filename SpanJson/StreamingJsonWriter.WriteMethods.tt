<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(decimal),
        typeof(bool),
        typeof(char),
        typeof(DateTime),
        typeof(DateTimeOffset),
        typeof(TimeSpan),
        typeof(Guid),
        typeof(Version),
        typeof(Uri)
    };
	var additionalMethods = new string[]
	{
		"BeginArray",
		"EndArray",
		"BeginObject",
		"EndObject",
		"DoubleQuote",
        "Null",
        "ValueSeparator",
	};
	var symbols = new[]
	{
		"Utf8",
		"Utf16",
	};
#>
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable ImpureMethodCallOnReadonlyValueField
using System.Runtime.CompilerServices;
using System;
namespace SpanJson
{
	public ref partial struct StreamingJsonWriter<TSymbol> where TSymbol : struct
	{

<# foreach(var t in types) {
   foreach(var symbol in symbols) {
#>
       [MethodImpl(MethodImplOptions.AggressiveInlining)]
       public void Write<#=symbol#><#=t.Name #>(<#=t.Name#> input)
       {
	      _jsonWriter.Write<#=symbol#><#=t.Name #>(input);		  
       }

<# } #>
<# } #>
<# foreach(var method in additionalMethods) {
   foreach(var symbol in symbols) {
#>       
	   [MethodImpl(MethodImplOptions.AggressiveInlining)]
       public void Write<#=symbol#><#=method#>()
       {
		   _jsonWriter.Write<#=symbol#><#=method#>();
       }
<# } #>
	   [MethodImpl(MethodImplOptions.AggressiveInlining)]
       public void Write<#=method#>()
       {
          if (typeof(TSymbol) == typeof(char))
          {
              _jsonWriter.WriteUtf16<#=method #>();
          }
		  
		  else if (typeof(TSymbol) == typeof(byte))
          {
              _jsonWriter.WriteUtf8<#=method #>();
          }
		  else 
		  {
              ThrowNotSupportedException();
          }
       }
<# } #>
  }
}